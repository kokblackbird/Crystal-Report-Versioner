# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Desktop Build

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

# Give Actions permission to create tags and releases
permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: ironmanx-04-2.sln
      Project_File: ironmanx-04-2\ironmanx-04-2.csproj
      Project_Directory: ironmanx-04-2
      Configuration: Release
      Platform: x86

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        shell: pwsh
        run: |
          if (Test-Path $env:Solution_Name) {
            nuget restore $env:Solution_Name
          } elseif (Test-Path $env:Project_File) {
            nuget restore $env:Project_File
          } else {
            Write-Host "No solution or project found to restore."
          }

      - name: Build solution
        shell: pwsh
        run: |
          if (Test-Path $env:Solution_Name) {
            msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /m
          } else {
            msbuild $env:Project_File /p:Configuration=$env:Configuration /p:Platform=$env:Platform /m
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BuildOutput
          path: ${{ env.Project_Directory }}\bin\${{ env.Platform }}\${{ env.Configuration }}\

      # ---------------------------------------
      # Extract version number from AssemblyInfo.cs
      # ---------------------------------------
      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $asmInfo = Join-Path $env:Project_Directory 'Properties\AssemblyInfo.cs'
          $version = $null
          if (Test-Path $asmInfo) {
            $infoMatch = Select-String -Path $asmInfo -Pattern 'AssemblyInformationalVersion\("([^"]+)"\)' | Select-Object -First 1
            if ($infoMatch) { $version = $infoMatch.Matches[0].Groups[1].Value }

            if (-not $version) {
              $verMatch = Select-String -Path $asmInfo -Pattern 'AssemblyVersion\("([0-9\.]+)"\)' | Select-Object -First 1
              if ($verMatch) { $version = $verMatch.Matches[0].Groups[1].Value }
            }
          }
          if (-not $version) { $version = "${{ github.run_number }}" }
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Using version: $version"

      # ---------------------------------------
      # Package artifacts into ZIP
      # ---------------------------------------
      - name: Package artifacts into ZIP
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.Configuration == 'Release'
        shell: pwsh
        run: |
          $outDir = Join-Path $env:Project_Directory "bin\$env:Platform\$env:Configuration"
          $zipPath = Join-Path $outDir "ironmanx-04-2_${{ steps.get_version.outputs.version }}.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          if (Test-Path $outDir) {
            Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zipPath
            "zip_path=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "Created $zipPath"
          } else {
            Write-Host "Output directory not found: $outDir"
          }

      # ---------------------------------------
      # Create Release and Upload Assets
      # ---------------------------------------
      - name: Create Release & Upload Assets
        uses: softprops/action-gh-release@v2
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.Configuration == 'Release'
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: "Release v${{ steps.get_version.outputs.version }}"
          body: |
            ðŸš€ Automated release from GitHub Actions  
            Commit: ${{ github.sha }}  
            Configuration: ${{ env.Configuration }}  
            Platform: ${{ env.Platform }}
          files: |
            ${{ env.Project_Directory }}\bin\${{ env.Platform }}\${{ env.Configuration }}\*.exe
            ${{ env.Project_Directory }}\bin\${{ env.Platform }}\${{ env.Configuration }}\*.zip
          generate_release_notes: true
          make_latest: true
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
