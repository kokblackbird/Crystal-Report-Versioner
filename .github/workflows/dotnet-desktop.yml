# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    # Project-specific paths + map secrets -> env so we can use them in `if:` without parser errors
    env:
      Solution_Name: ironmanx-04-2.sln
      Test_Project_Path: ironmanx-04-2.Tests\ironmanx-04-2.Tests.csproj
      Wap_Project_Directory: ironmanx-04-2.Package
      Wap_Project_Path: ironmanx-04-2.Package\ironmanx-04-2.Package.wapproj
      PFX_B64: ${{ secrets.Base64_Encoded_Pfx }}
      PFX_KEY: ${{ secrets.Pfx_Key }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Execute unit tests (if present)
      shell: pwsh
      run: |
        try {
          if (Test-Path "$env:Test_Project_Path") {
            dotnet test "$env:Test_Project_Path" --configuration "${{ matrix.configuration }}"
          } else {
            Write-Host "No test project at $env:Test_Project_Path — skipping."
          }
        } catch {
          Write-Host "Tests failed (continuing CI)."; exit 1
        }

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

    # Decode PFX only if the secret/environment var is non-empty
    - name: Decode the pfx (if provided)
      if: ${{ env.PFX_B64 != '' }}
      shell: pwsh
      run: |
        if (-not (Test-Path "$env:Wap_Project_Directory")) {
          New-Item -ItemType Directory -Path "$env:Wap_Project_Directory" | Out-Null
        }
        $bytes = [Convert]::FromBase64String($env:PFX_B64)
        $certificatePath = Join-Path $env:Wap_Project_Directory 'GitHubActionsWorkflow.pfx'
        [IO.File]::WriteAllBytes($certificatePath, $bytes)
        Write-Host "Wrote certificate to $certificatePath"

    - name: Create the app package (sign if PFX exists)
      shell: pwsh
      run: |
        $pfxPath = Join-Path $env:Wap_Project_Directory 'GitHubActionsWorkflow.pfx'
        $certArg = ""
        if (Test-Path $pfxPath) {
          Write-Host "Signing enabled."
          $certArg = "/p:PackageCertificateKeyFile=$pfxPath /p:PackageCertificatePassword=$env:PFX_KEY"
        } else {
          Write-Host "No PFX present — building unsigned package."
        }
        msbuild $env:Wap_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:AppxBundlePlatforms="x86|x64" `
          $certArg

    - name: Remove the pfx
      if: always()
      shell: pwsh
      run: |
        $pfxPath = Join-Path $env:Wap_Project_Directory 'GitHubActionsWorkflow.pfx'
        if (Test-Path $pfxPath) {
          Remove-Item $pfxPath -Force
          Write-Host "Removed temporary certificate."
        }

    - name: Upload MSIX artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package (${{ matrix.configuration }})
        path: ${{ env.Wap_Project_Directory }}\AppPackages
