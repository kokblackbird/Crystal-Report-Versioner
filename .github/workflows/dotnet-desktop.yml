# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Desktop — Auto Package if WAP Present

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      # Map secrets to env (optional; used only if WAP exists)
      PFX_B64: ${{ secrets.Base64_Encoded_Pfx }}
      PFX_KEY: ${{ secrets.Pfx_Key }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Locate solution and projects
      shell: pwsh
      run: |
        Write-Host "Scanning repo for .sln, .csproj, .wapproj ..."
        Get-ChildItem -Recurse -File -Include *.sln,*.csproj,*.wapproj | ForEach-Object { $_.FullName }

        $solution = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
        if (-not $solution) { throw "No .sln found. Add a solution or update the workflow to point at a csproj." }
        "SOLUTION_PATH=$($solution.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

        # Pick a primary app csproj (first non-test desktop csproj) for publish if no WAP present
        $appProj = Get-ChildItem -Recurse -Filter *.csproj |
          Where-Object { $_.FullName -notmatch '\.Tests\\|\.Test\\' } |
          Select-Object -First 1
        if ($appProj) { "APP_CSPROJ=$($appProj.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append }

        # Try to find a WAP project
        $wap = Get-ChildItem -Recurse -Filter *.wapproj | Select-Object -First 1
        if ($wap) {
          "HAS_WAP=true" | Out-File -FilePath $env:GITHUB_ENV -Append
          "WAP_PATH=$($wap.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          $wapDir = Split-Path $wap.FullName -Parent
          "WAP_DIR=$wapDir" | Out-File -FilePath $env:GITHUB_ENV -Append
          "APP_PACKAGES_DIR=$wapDir\AppPackages" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Found WAP: $($wap.FullName)"
        } else {
          "HAS_WAP=false" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "No WAP project found. Will publish plain binaries."
        }

    - name: Restore solution
      run: msbuild "$env:SOLUTION_PATH" /t:Restore /p:Configuration=${{ matrix.configuration }}

    - name: Build solution
      run: msbuild "$env:SOLUTION_PATH" /p:Configuration=${{ matrix.configuration }} /m

    - name: Run tests (if any discovered)
      shell: pwsh
      run: |
        $testProjs = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -match '\.Tests\\|\.Test\\' }
        if ($testProjs) {
          dotnet test "$env:SOLUTION_PATH" --configuration "${{ matrix.configuration }}"
        } else {
          Write-Host "No test projects found — skipping."
        }

    # ----------- MSIX path (only runs if a WAP exists) -----------
    - name: Decode PFX (if provided)
      if: env.HAS_WAP == 'true' && env.PFX_B64 != ''
      shell: pwsh
      run: |
        if (-not (Test-Path "$env:WAP_DIR")) { New-Item -ItemType Directory -Path "$env:WAP_DIR" | Out-Null }
        $bytes = [Convert]::FromBase64String($env:PFX_B64)
        $pfx = Join-Path $env:WAP_DIR 'GitHubActionsWorkflow.pfx'
        [IO.File]::WriteAllBytes($pfx, $bytes)
        "PFX_PATH=$pfx" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "Wrote PFX to $pfx"

    - name: Create MSIX (sign if PFX present)
      if: env.HAS_WAP == 'true'
      shell: pwsh
      run: |
        $certArg = ""
        if ($env:PFX_PATH -and (Test-Path $env:PFX_PATH)) {
          Write-Host "Signing enabled."
          $certArg = "/p:PackageCertificateKeyFile=$env:PFX_PATH /p:PackageCertificatePassword=$env:PFX_KEY"
        } else {
          Write-Host "No PFX provided — building unsigned MSIX."
        }
        msbuild "$env:WAP_PATH" `
          /p:Configuration=${{ matrix.configuration }} `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:AppxBundlePlatforms="x86|x64" `
          $certArg

    - name: Cleanup PFX
      if: always() && env.PFX_PATH != ''
      shell: pwsh
      run: |
        if (Test-Path $env:PFX_PATH) { Remove-Item $env:PFX_PATH -Force }

    - name: Upload MSIX artifacts
      if: env.HAS_WAP == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package (${{ matrix.configuration }})
        path: ${{ env.APP_PACKAGES_DIR }}

    # ----------- Non-MSIX path (if no WAP) -----------
    - name: Publish desktop app (no MSIX)
      if: env.HAS_WAP != 'true'
      run: dotnet publish "$env:APP_CSPROJ" -c ${{ matrix.configuration }} -o out/${{ matrix.configuration }}

    - name: Upload published binaries (no MSIX)
      if: env.HAS_WAP != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: App Binaries (${{ matrix.configuration }})
        path: out/${{ matrix.configuration }}
